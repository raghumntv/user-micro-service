name: User Service CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Sonar Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
            GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
              -Dsonar.organization=sushantad-tv
              -Dsonar.projectKey=sushantad-tv_user-micro-service

  unit-test:
    name: Unit Tests
    needs: [static-analysis]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Install Dependencies
        run: npm install

      - name: Clean Up Old Report Files
        run: rm -rf ./mochawesome-report

      - name: Run Unit Tests
        run: npm run unit

      - name: Upload Mochawesome Report
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-result
          path: ./mochawesome-report
      - name: Copy test execution result
        run: |
          mkdir public
          cp -r ./mochawesome-report public
          mv ./mochawesome-report/mochawesome.html public/index.html

      - name: Deploy report page
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

  integration-test:
    name: Integration Tests
    needs: [unit-test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Install Dependencies
        run: npm install

      - name: Run Integration Tests
        run: npm run integration

  build:
    name: Build application
    needs: [unit-test,integration-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && failure() != true && needs.unit-test.result == 'success' # Only run on push to main branch if unit-test succeeds
    strategy: 
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout 
        uses: actions/checkout@v3 

      - name: Set up Node
        uses: actions/setup-node@v3 
        with: 
          node-version: ${{ matrix.node-version }}

      - name: build
        run: |
          docker-compose build   
              
  # Deploy job to fit render.com
  deploy:
    name: Deploy
    needs: [build,unit-test,integration-test] # Our tests must pass in order to run the deploy job
    runs-on: ubuntu-latest

    steps: 
      - name: Deploy to Staging
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.SERVICE_ID }} # Can be found as part of the Deploy Hook
          api-key: ${{ secrets.RENDER_API_KEY }} # Create your API key in Render Dashboard > Account Settings

  e2e-tests:
    name: E2E tests
    needs: [deploy]
    runs-on: ubuntu-latest
 
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Run tests
        run: |
          npm install
          npm test

  slack-notfication:
    name: Slack Notification
    needs: [e2e-tests]
    runs-on: ubuntu-latest

#      SLACK_USERNAME: rtCamp

    steps:
      - uses: actions/checkout@v2
      - name: Checkout code

        uses: abinoda/slack-action@master
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          args: '{\"channel\":\"C0612NY969K\",\"text\":\"Hello world\"}'

#        id: slack
#        uses: slackapi/slack-github-action@v1.24.0
#        uses: rtCamp/action-slack-notify@v2
#        env:
#          SLACK_WEBHOOK: $${{ secrets.SLACK_WEBHOOK_URL }}
#          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
#          SLACK_CHANNEL: otaku-2-workshop-slack-integration-testing
#          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
#          #      SLACK_ICON: https://github.com/rtCamp.png?size=48
#          SLACK_MESSAGE: "GitHub build result: ${{ job.status }}\n${{ github.event.head_commit.url }}"
#          SLACK_TITLE: User App action
#        with:
#          channel-id: 'C0612NY969K'
#          slack-message: "GitHub build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
#          slack-message: "GitHub build result: ${{ job.status }}\n${{ github.event.head_commit.url }}"
#        uses: pullreminders/slack-action@master
#        with:
#          status: ${{ job.status }}
#          steps: ${{ toJson(steps) }}
#          channel: '#otaku-2-workshop-slack-integration-testing'
#          args: '{\"channel\":\"C0612NY969K\",\"text\":\"Hello world\"}'
#      - name: Send Slack Notification
#        uses: act10ns/slack@v1
#        with:
#          status: ${{ job.status }}
#          steps: ${{ toJson(steps) }}
#          channel: '#otaku-2-workshop-slack-integration-testing'
